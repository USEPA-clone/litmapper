"""initial_migration

Revision ID: 98b866727122
Revises: 
Create Date: 2024-09-20 18:11:18.671626

"""

from pathlib import Path

import sqlalchemy as sa
import sqlalchemy_utils
from alembic import op
from sqlalchemy.dialects import postgresql
from sqlalchemy_searchable import sync_trigger

from litmapper.models import CONCEPT_GRAPH_SCHEMA

# revision identifiers, used by Alembic.
revision = "98b866727122"
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    op.execute(f"CREATE SCHEMA {CONCEPT_GRAPH_SCHEMA}")
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "article",
        sa.Column("article_id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("pmid", sa.Integer(), nullable=True),
        sa.Column("title", sa.String(), nullable=False),
        sa.Column("abstract", sa.String(), nullable=False),
        sa.Column("publication_date", sa.Date(), nullable=True),
        sa.Column(
            "search_vector",
            sqlalchemy_utils.types.ts_vector.TSVectorType(),
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("article_id"),
        sa.UniqueConstraint("pmid"),
    )
    op.create_index(
        op.f("ix_article_article_id"), "article", ["article_id"], unique=False
    )
    op.create_index(
        "ix_article_search_vector",
        "article",
        ["search_vector"],
        unique=False,
        postgresql_using="gin",
    )
    conn = op.get_bind()
    sync_trigger(conn, "article", "search_vector", ["title", "abstract"])
    tsparse_expressions = (
        Path(__file__).parent / "tsparse_expressions.sql"
    ).read_text()
    conn.execute(tsparse_expressions)

    op.create_table(
        "article_requester",
        sa.Column("article_id", sa.Integer(), autoincrement=False, nullable=False),
        sa.Column("requester", sa.String(), nullable=True),
        sa.Column("upload_date", sa.Date(), nullable=True),
        sa.PrimaryKeyConstraint("article_id"),
        sa.UniqueConstraint("article_id", name="ucon_ar"),
    )
    op.create_index(
        op.f("ix_article_requester_article_id"),
        "article_requester",
        ["article_id"],
        unique=False,
    )

    op.create_table(
        "article_set",
        sa.Column("article_set_id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("meta_json", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.PrimaryKeyConstraint("article_set_id"),
        sa.UniqueConstraint("name"),
    )

    op.create_table(
        "concept",
        sa.Column("concept_id", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("concept_id"),
        schema="concept_graph",
    )

    op.create_table(
        "semantic_type",
        sa.Column("semantic_type_id", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("semantic_type_id"),
        schema="concept_graph",
    )

    op.create_table(
        "source",
        sa.Column("source_id", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("source_id"),
        schema="concept_graph",
    )

    op.create_table(
        "mesh_term",
        sa.Column("mesh_id", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("mesh_id"),
        sa.UniqueConstraint("name"),
    )

    op.create_table(
        "temp_request",
        sa.Column("temp_request_id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("requester", sa.String(), nullable=True),
        sa.Column("date", sa.Date(), nullable=True),
        sa.Column("search_query", sa.String(), nullable=True),
        sa.PrimaryKeyConstraint("temp_request_id"),
        sa.UniqueConstraint("temp_request_id", name="ucon_tr"),
    )

    op.create_table(
        "article_article_set",
        sa.Column("article_id", sa.Integer(), nullable=False),
        sa.Column("article_set_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["article_id"],
            ["article.article_id"],
        ),
        sa.ForeignKeyConstraint(
            ["article_set_id"],
            ["article_set.article_set_id"],
        ),
        sa.PrimaryKeyConstraint("article_id", "article_set_id"),
        sa.UniqueConstraint("article_id", "article_set_id"),
        sa.UniqueConstraint("article_id", "article_set_id"),
    )
    op.create_index(
        op.f("ix_article_article_set_article_id"),
        "article_article_set",
        ["article_id"],
        unique=False,
    )

    op.create_table(
        "article_embedding",
        sa.Column("article_id", sa.Integer(), autoincrement=False, nullable=False),
        sa.Column(
            "use_embedding", postgresql.ARRAY(sa.Float(), dimensions=1), nullable=False
        ),
        sa.Column(
            "specter_embedding",
            postgresql.ARRAY(sa.Float(), dimensions=1),
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["article_id"],
            ["article.article_id"],
        ),
        sa.PrimaryKeyConstraint("article_id"),
        sa.UniqueConstraint("article_id", name="ucon_ae"),
    )
    op.create_index(
        op.f("ix_article_embedding_article_id"),
        "article_embedding",
        ["article_id"],
        unique=False,
    )

    op.create_table(
        "article_mesh_term",
        sa.Column("article_id", sa.Integer(), autoincrement=False, nullable=False),
        sa.Column("mesh_id", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["article_id"],
            ["article.article_id"],
        ),
        sa.ForeignKeyConstraint(
            ["mesh_id"],
            ["mesh_term.mesh_id"],
        ),
        sa.UniqueConstraint("article_id", "mesh_id"),
    )
    op.create_index(
        op.f("ix_article_mesh_term_article_id"),
        "article_mesh_term",
        ["article_id"],
        unique=False,
    )

    op.create_table(
        "article_temp_request",
        sa.Column("article_id", sa.Integer(), nullable=False),
        sa.Column("temp_request_id", sa.Integer(), nullable=False),
        sa.Column("is_article_temp", sa.Boolean(), nullable=True),
        sa.ForeignKeyConstraint(
            ["article_id"],
            ["article.article_id"],
        ),
        sa.ForeignKeyConstraint(
            ["temp_request_id"],
            ["temp_request.temp_request_id"],
        ),
        sa.PrimaryKeyConstraint("article_id", "temp_request_id"),
        sa.UniqueConstraint("article_id", "temp_request_id"),
        sa.UniqueConstraint("article_id", "temp_request_id"),
    )
    op.create_index(
        op.f("ix_article_temp_request_article_id"),
        "article_temp_request",
        ["article_id"],
        unique=False,
    )

    op.create_table(
        "concept_alias",
        sa.Column(
            "concept_alias_id",
            sa.String(),
            nullable=False,
            comment="Unique key for the alias in the graph.",
        ),
        sa.Column("concept_id", sa.String(), nullable=True),
        sa.Column("source_id", sa.String(), nullable=True),
        sa.Column(
            "alias_name",
            sa.String(),
            nullable=False,
            comment="Name of the alias from the source vocabulary.",
        ),
        sa.Column(
            "source_concept_id",
            sa.String(),
            nullable=False,
            comment="The source's ID for this concept alias (ex MeSH ID for MeSH).",
        ),
        sa.ForeignKeyConstraint(
            ["concept_id"],
            ["concept_graph.concept.concept_id"],
        ),
        sa.ForeignKeyConstraint(
            ["source_id"],
            ["concept_graph.source.source_id"],
        ),
        sa.PrimaryKeyConstraint("concept_alias_id"),
        schema="concept_graph",
    )

    op.create_table(
        "concept_semantic_type",
        sa.Column("concept_id", sa.String(), nullable=True),
        sa.Column("semantic_type_id", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["concept_id"],
            ["concept_graph.concept.concept_id"],
        ),
        sa.ForeignKeyConstraint(
            ["semantic_type_id"],
            ["concept_graph.semantic_type.semantic_type_id"],
        ),
        sa.UniqueConstraint("concept_id", "semantic_type_id"),
        schema="concept_graph",
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("concept_semantic_type", schema="concept_graph")
    op.drop_table("concept_alias", schema="concept_graph")
    op.drop_index(
        op.f("ix_article_temp_request_article_id"), table_name="article_temp_request"
    )
    op.drop_table("article_temp_request")
    op.drop_index(
        op.f("ix_article_mesh_term_article_id"), table_name="article_mesh_term"
    )
    op.drop_table("article_mesh_term")
    op.drop_index(
        op.f("ix_article_embedding_article_id"), table_name="article_embedding"
    )
    op.drop_table("article_embedding")
    op.drop_index(
        op.f("ix_article_article_set_article_id"), table_name="article_article_set"
    )
    op.drop_table("article_article_set")
    op.drop_table("temp_request")
    op.drop_table("mesh_term")
    op.drop_table("source", schema="concept_graph")
    op.drop_table("semantic_type", schema="concept_graph")
    op.drop_table("concept", schema="concept_graph")
    op.drop_table("article_set")
    op.drop_index(
        op.f("ix_article_requester_article_id"), table_name="article_requester"
    )
    op.drop_table("article_requester")
    op.drop_index("ix_article_search_vector", table_name="article")
    op.drop_index(op.f("ix_article_article_id"), table_name="article")
    op.drop_table("article")
    # ### end Alembic commands ###
